// Package wb_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package wbApi

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	HeaderApiKeyScopes = "HeaderApiKey.Scopes"
)

// Defines values for IncomesItemStatus.
const (
	Принято IncomesItemStatus = "Принято"
)

// DetailReportItem defines model for DetailReportItem.
type DetailReportItem struct {
	// Acceptance Стоимость платной приёмки
	Acceptance *float32 `json:"acceptance,omitempty"`

	// AcquiringBank Наименование банка-эквайера
	AcquiringBank *string `json:"acquiring_bank,omitempty"`

	// AcquiringFee Возмещение издержек по эквайрингу. <br> Издержки WB за услуги эквайринга: вычитаются из вознаграждения WB и не влияют на доход продавца.
	AcquiringFee *float32 `json:"acquiring_fee,omitempty"`

	// AcquiringPercent Размер комиссии за эквайринг без НДС, %
	AcquiringPercent *float32 `json:"acquiring_percent,omitempty"`

	// AdditionalPayment Доплаты
	AdditionalPayment *float32 `json:"additional_payment,omitempty"`

	// Barcode Баркод
	Barcode *string `json:"barcode,omitempty"`

	// BonusTypeName Обоснование штрафов и доплат. <br>Поле будет в ответе при наличии значения
	BonusTypeName *string `json:"bonus_type_name,omitempty"`

	// BrandName Бренд
	BrandName *string `json:"brand_name,omitempty"`

	// CommissionPercent Процент комиссии
	CommissionPercent *float32 `json:"commission_percent,omitempty"`

	// CreateDt Дата формирования отчёта
	CreateDt *openapi_types.Date `json:"create_dt,omitempty"`

	// CurrencyName Валюта отчёта
	CurrencyName *string `json:"currency_name,omitempty"`

	// DateFrom Дата начала отчётного периода
	DateFrom *openapi_types.Date `json:"date_from,omitempty"`

	// DateTo Дата конца отчётного периода
	DateTo *openapi_types.Date `json:"date_to,omitempty"`

	// DeclarationNumber Номер таможенной декларации
	DeclarationNumber *string `json:"declaration_number,omitempty"`

	// Deduction Прочие удержания/выплаты
	Deduction *float32 `json:"deduction,omitempty"`

	// DeliveryAmount Количество доставок
	DeliveryAmount *int `json:"delivery_amount,omitempty"`

	// DeliveryRub Стоимость логистики
	DeliveryRub *float32 `json:"delivery_rub,omitempty"`

	// DocTypeName Тип документа
	DocTypeName *string `json:"doc_type_name,omitempty"`

	// GiBoxTypeName Тип коробов
	GiBoxTypeName *string `json:"gi_box_type_name,omitempty"`

	// GiId Номер поставки
	GiId *int `json:"gi_id,omitempty"`

	// IsKgvpV2 Размер снижения кВВ из-за акции
	IsKgvpV2 *float32 `json:"is_kgvp_v2,omitempty"`

	// Kiz Код маркировки. <br> Поле будет в ответе при наличии значения
	Kiz *string `json:"kiz,omitempty"`

	// NmId Артикул WB
	NmId *int `json:"nm_id,omitempty"`

	// OfficeName Склад
	OfficeName *string `json:"office_name,omitempty"`

	// OrderDt Дата заказа. <br>Присылается с явным указанием часового пояса
	OrderDt *time.Time `json:"order_dt,omitempty"`

	// Penalty Штрафы
	Penalty *float32 `json:"penalty,omitempty"`

	// PpvzForPay К перечислению продавцу за реализованный товар
	PpvzForPay *float32 `json:"ppvz_for_pay,omitempty"`

	// PpvzInn ИНН партнера
	PpvzInn *string `json:"ppvz_inn,omitempty"`

	// PpvzKvwPrc Итоговый кВВ без НДС, %
	PpvzKvwPrc *float32 `json:"ppvz_kvw_prc,omitempty"`

	// PpvzKvwPrcBase Размер кВВ без НДС, % базовый
	PpvzKvwPrcBase *float32 `json:"ppvz_kvw_prc_base,omitempty"`

	// PpvzOfficeId Номер офиса
	PpvzOfficeId *int `json:"ppvz_office_id,omitempty"`

	// PpvzOfficeName Наименование офиса доставки
	PpvzOfficeName *string `json:"ppvz_office_name,omitempty"`

	// PpvzReward Возмещение за выдачу и возврат товаров на ПВЗ
	PpvzReward *float32 `json:"ppvz_reward,omitempty"`

	// PpvzSalesCommission Вознаграждение с продаж до вычета услуг поверенного, без НДС
	PpvzSalesCommission *float32 `json:"ppvz_sales_commission,omitempty"`

	// PpvzSppPrc Скидка постоянного покупателя
	PpvzSppPrc *float32 `json:"ppvz_spp_prc,omitempty"`

	// PpvzSupplierId Номер партнера
	PpvzSupplierId *int `json:"ppvz_supplier_id,omitempty"`

	// PpvzSupplierName Партнер
	PpvzSupplierName *string `json:"ppvz_supplier_name,omitempty"`

	// PpvzVw Вознаграждение WB без НДС
	PpvzVw *float32 `json:"ppvz_vw,omitempty"`

	// PpvzVwNds НДС с вознаграждения WB
	PpvzVwNds *float32 `json:"ppvz_vw_nds,omitempty"`

	// ProductDiscountForReport Согласованный продуктовый дисконт
	ProductDiscountForReport *float32 `json:"product_discount_for_report,omitempty"`

	// Quantity Количество
	Quantity *int `json:"quantity,omitempty"`

	// RealizationreportId Номер отчёта
	RealizationreportId *int `json:"realizationreport_id,omitempty"`

	// RebillLogisticCost Возмещение издержек по перевозке. Поле будет в ответе при наличии значения
	RebillLogisticCost *float32 `json:"rebill_logistic_cost,omitempty"`

	// RebillLogisticOrg Организатор перевозки. Поле будет в ответе при наличии значения
	RebillLogisticOrg *string `json:"rebill_logistic_org,omitempty"`

	// ReportType Тип отчёта:
	//
	//   * `1` — стандартный
	//   * `2` — для уведомления о выкупе
	ReportType *int `json:"report_type,omitempty"`

	// RetailAmount Сумма продаж (возвратов)
	RetailAmount *float32 `json:"retail_amount,omitempty"`

	// RetailPrice Цена розничная
	RetailPrice *float32 `json:"retail_price,omitempty"`

	// RetailPriceWithdiscRub Цена розничная с учетом согласованной скидки
	RetailPriceWithdiscRub *float32 `json:"retail_price_withdisc_rub,omitempty"`

	// ReturnAmount Количество возвратов
	ReturnAmount *int `json:"return_amount,omitempty"`

	// Rid Уникальный идентификатор заказа
	Rid *int `json:"rid,omitempty"`

	// RrDt Дата операции. <br> Присылается с явным указанием часового пояса
	RrDt *openapi_types.Date `json:"rr_dt,omitempty"`

	// RrdId Номер строки
	RrdId *int `json:"rrd_id,omitempty"`

	// SaName Артикул продавца
	SaName *string `json:"sa_name,omitempty"`

	// SaleDt Дата продажи. <br>Присылается с явным указанием часового пояса
	SaleDt *time.Time `json:"sale_dt,omitempty"`

	// SalePercent Согласованная скидка
	SalePercent *int `json:"sale_percent,omitempty"`

	// ShkId Штрих-код
	ShkId *int `json:"shk_id,omitempty"`

	// SiteCountry Страна продажи
	SiteCountry *string `json:"site_country,omitempty"`

	// Srid Уникальный идентификатор заказа.
	//
	// Примечание для использующих API Marketplace: `srid` равен `rid` в ответах методов сборочных заданий.
	Srid *string `json:"srid,omitempty"`

	// StickerId Цифровое значение стикера, который клеится на товар в процессе сборки заказа по схеме "Маркетплейс"
	StickerId *string `json:"sticker_id,omitempty"`

	// StorageFee Стоимость хранения
	StorageFee *float32 `json:"storage_fee,omitempty"`

	// SubjectName Предмет
	SubjectName *string `json:"subject_name,omitempty"`

	// SupRatingPrcUp Размер снижения кВВ из-за рейтинга
	SupRatingPrcUp *float32 `json:"sup_rating_prc_up,omitempty"`

	// SupplierOperName Обоснование для оплаты
	SupplierOperName *string `json:"supplier_oper_name,omitempty"`

	// SupplierPromo Промокод
	SupplierPromo *float32 `json:"supplier_promo,omitempty"`

	// SuppliercontractCode Договор
	SuppliercontractCode *map[string]interface{} `json:"suppliercontract_code,omitempty"`

	// TsName Размер
	TsName *string `json:"ts_name,omitempty"`
}

// IncomesItem defines model for IncomesItem.
type IncomesItem struct {
	// Barcode Бар-код
	Barcode *string `json:"barcode,omitempty"`

	// Date Дата поступления. Если часовой пояс не указан, то берется Московское время UTC+3.
	Date *openapi_types.Date `json:"date,omitempty"`

	// DateClose Дата принятия (закрытия) в WB. Если часовой пояс не указан, то берется Московское время UTC+3
	DateClose *openapi_types.Date `json:"dateClose,omitempty"`

	// IncomeId Номер поставки
	IncomeId *int `json:"incomeId,omitempty"`

	// LastChangeDate Дата и время обновления информации в сервисе. Это поле соответствует параметру `dateFrom` в запросе. Если часовой пояс не указан, то берется Московское время UTC+3.
	LastChangeDate *time.Time `json:"lastChangeDate,omitempty"`

	// NmId Артикул WB
	NmId *int `json:"nmId,omitempty"`

	// Number Номер УПД
	Number *string `json:"number,omitempty"`

	// Quantity Количество
	Quantity *int `json:"quantity,omitempty"`

	// Status Текущий статус поставки
	Status *IncomesItemStatus `json:"status,omitempty"`

	// SupplierArticle Артикул продавца
	SupplierArticle *string `json:"supplierArticle,omitempty"`

	// TechSize Размер товара (пример S, M, L, XL, 42, 42-43)
	TechSize *string `json:"techSize,omitempty"`

	// TotalPrice Цена из УПД
	TotalPrice *float32 `json:"totalPrice,omitempty"`

	// WarehouseName Название склада
	WarehouseName *string `json:"warehouseName,omitempty"`
}

// IncomesItemStatus Текущий статус поставки
type IncomesItemStatus string

// OrdersItem defines model for OrdersItem.
type OrdersItem struct {
	// Barcode Баркод
	Barcode *string `json:"barcode,omitempty"`

	// Brand Бренд
	Brand *string `json:"brand,omitempty"`

	// CancelDate Дата и время отмены заказа. Если заказ не был отменен, то "0001-01-01T00:00:00".Если часовой пояс не указан, то берется Московское время UTC+3.
	CancelDate *time.Time `json:"cancelDate,omitempty"`

	// Category Категория
	Category *string `json:"category,omitempty"`

	// CountryName Страна
	CountryName *string `json:"countryName,omitempty"`

	// Date Дата и время заказа. Это поле соответствует параметру `dateFrom` в запросе, если параметр `flag`=1. Если часовой пояс не указан, то берется Московское время (UTC+3).
	Date *time.Time `json:"date,omitempty"`

	// DiscountPercent Скидка продавца
	DiscountPercent *int `json:"discountPercent,omitempty"`

	// FinishedPrice Цена с учетом всех скидок, кроме суммы по WB Кошельку
	FinishedPrice *float32 `json:"finishedPrice,omitempty"`

	// GNumber Номер заказа
	GNumber *string `json:"gNumber,omitempty"`

	// IncomeID Номер поставки
	IncomeID *int `json:"incomeID,omitempty"`

	// IsCancel Отмена заказа. true - заказ отменен
	IsCancel *bool `json:"isCancel,omitempty"`

	// IsRealization Договор реализации
	IsRealization *bool `json:"isRealization,omitempty"`

	// IsSupply Договор поставки
	IsSupply *bool `json:"isSupply,omitempty"`

	// LastChangeDate Дата и время обновления информации в сервисе. Это поле соответствует параметру `dateFrom` в запросе, если параметр `flag`=0 или не указан. Если часовой пояс не указан, то берется Московское время (UTC+3).
	LastChangeDate *time.Time `json:"lastChangeDate,omitempty"`

	// NmId Артикул WB
	NmId *int `json:"nmId,omitempty"`

	// OblastOkrugName Округ
	OblastOkrugName *string `json:"oblastOkrugName,omitempty"`

	// OrderType Тип заказа:
	// - `Клиентский` — заказ, поступивший от покупателя
	// - `Возврат Брака` — возврат товара продавцу
	// - `Принудительный возврат` — возврат товара продавцу
	// - `Возврат обезлички` — возврат товара продавцу
	// - `Возврат Неверного Вложения` — возврат товара продавцу
	// - `Возврат Продавца` — возврат товара продавцу
	// - `Возврат из Отзыва` — возврат товара продавцу
	// - `АвтоВозврат МП` — возврат товара продавцу
	// - `Недокомплект (Вина продавца)` — возврат товара продавцу
	// - `Возврат КГТ` — возврат товара продавцу
	OrderType *string `json:"orderType,omitempty"`

	// PriceWithDisc Цена со скидкой продавца (= `totalPrice` * (1 - `discountPercent`/100))
	PriceWithDisc *float32 `json:"priceWithDisc,omitempty"`

	// RegionName Регион
	RegionName *string `json:"regionName,omitempty"`

	// Spp Скидка WB
	Spp *float32 `json:"spp,omitempty"`

	// Srid Уникальный идентификатор заказа.<br> Примечание для использующих API Маркетплейс: `srid` равен `rid` в ответах методов сборочных заданий.
	Srid *string `json:"srid,omitempty"`

	// Sticker Идентификатор стикера
	Sticker *string `json:"sticker,omitempty"`

	// Subject Предмет
	Subject *string `json:"subject,omitempty"`

	// SupplierArticle Артикул продавца
	SupplierArticle *string `json:"supplierArticle,omitempty"`

	// TechSize Размер товара
	TechSize *string `json:"techSize,omitempty"`

	// TotalPrice Цена без скидок
	TotalPrice *float32 `json:"totalPrice,omitempty"`

	// WarehouseName Склад отгрузки
	WarehouseName *string `json:"warehouseName,omitempty"`
}

// SalesItem defines model for SalesItem.
type SalesItem struct {
	// Barcode Баркод
	Barcode *string `json:"barcode,omitempty"`

	// Brand Бренд
	Brand *string `json:"brand,omitempty"`

	// Category Категория
	Category *string `json:"category,omitempty"`

	// CountryName Страна
	CountryName *string `json:"countryName,omitempty"`

	// Date Дата и время продажи. Это поле соответствует параметру `dateFrom` в запросе, если параметр `flag`=1. Если часовой пояс не указан, то берется Московское время (UTC+3).
	Date *string `json:"date,omitempty"`

	// DiscountPercent Скидка продавца
	DiscountPercent *int `json:"discountPercent,omitempty"`

	// FinishedPrice Фактическая цена с учетом всех скидок (к взиманию с покупателя)
	FinishedPrice *float32 `json:"finishedPrice,omitempty"`

	// ForPay К перечислению продавцу
	ForPay *float32 `json:"forPay,omitempty"`

	// GNumber Номер заказа
	GNumber *string `json:"gNumber,omitempty"`

	// IncomeID Номер поставки
	IncomeID *int `json:"incomeID,omitempty"`

	// IsRealization Договор реализации
	IsRealization *bool `json:"isRealization,omitempty"`

	// IsSupply Договор поставки
	IsSupply *bool `json:"isSupply,omitempty"`

	// LastChangeDate Дата и время обновления информации в сервисе. Это поле соответствует параметру `dateFrom` в запросе, если параметр `flag`=0 или не указан. Если часовой пояс не указан, то берется Московское время (UTC+3).
	LastChangeDate *string `json:"lastChangeDate,omitempty"`

	// NmId Артикул WB
	NmId *int `json:"nmId,omitempty"`

	// OblastOkrugName Округ
	OblastOkrugName *string `json:"oblastOkrugName,omitempty"`

	// OrderType Тип заказа:
	// - `Клиентский` — заказ, поступивший от покупателя
	// - `Возврат Брака` — возврат товара продавцу
	// - `Принудительный возврат` — возврат товара продавцу
	// - `Возврат обезлички` — возврат товара продавцу
	// - `Возврат Неверного Вложения` — возврат товара продавцу
	// - `Возврат Продавца` — возврат товара продавцу
	// - `Возврат из Отзыва` — возврат товара продавцу
	// - `АвтоВозврат МП` — возврат товара продавцу
	// - `Недокомплект (Вина продавца)` — возврат товара продавцу
	// - `Возврат КГТ` — возврат товара продавцу
	OrderType *string `json:"orderType,omitempty"`

	// PaymentSaleAmount Оплачено с WB Кошелька
	PaymentSaleAmount *int `json:"paymentSaleAmount,omitempty"`

	// PriceWithDisc Цена со скидкой продавца, от которой считается сумма к перечислению продавцу `forPay` (= `totalPrice` * (1 - `discountPercent`/100))
	PriceWithDisc *float32 `json:"priceWithDisc,omitempty"`

	// RegionName Регион
	RegionName *string `json:"regionName,omitempty"`

	// SaleID Уникальный идентификатор продажи/возврата <ul>  <li> `S**********` — продажа  <li> `R**********` — возврат (на склад WB)  </ul>
	SaleID *string `json:"saleID,omitempty"`

	// Spp Скидка WB
	Spp *float32 `json:"spp,omitempty"`

	// Srid Уникальный идентификатор заказа.<br> Примечание для использующих API Маркетплейс: `srid` равен `rid` в ответах методов сборочных заданий.
	Srid *string `json:"srid,omitempty"`

	// Sticker Идентификатор стикера
	Sticker *string `json:"sticker,omitempty"`

	// Subject Предмет
	Subject *string `json:"subject,omitempty"`

	// SupplierArticle Артикул продавца
	SupplierArticle *string `json:"supplierArticle,omitempty"`

	// TechSize Размер товара
	TechSize *string `json:"techSize,omitempty"`

	// TotalPrice Цена без скидок
	TotalPrice *float32 `json:"totalPrice,omitempty"`

	// WarehouseName Склад отгрузки
	WarehouseName *string `json:"warehouseName,omitempty"`
}

// StocksItem defines model for StocksItem.
type StocksItem struct {
	// Discount Скидка
	Discount *float32 `json:"Discount,omitempty"`

	// Price Цена
	Price *float32 `json:"Price,omitempty"`

	// SCCode Код контракта (внутренние технологические данные)
	SCCode *string `json:"SCCode,omitempty"`

	// Barcode Баркод
	Barcode *string `json:"barcode,omitempty"`

	// Brand Бренд
	Brand *string `json:"brand,omitempty"`

	// Category Категория
	Category *string `json:"category,omitempty"`

	// InWayFromClient В пути от клиента
	InWayFromClient *int `json:"inWayFromClient,omitempty"`

	// InWayToClient В пути к клиенту
	InWayToClient *int `json:"inWayToClient,omitempty"`

	// IsRealization Договор реализации (внутренние технологические данные)
	IsRealization *bool `json:"isRealization,omitempty"`

	// IsSupply Договор поставки (внутренние технологические данные)
	IsSupply *bool `json:"isSupply,omitempty"`

	// LastChangeDate Дата и время обновления информации в сервисе. Это поле соответствует параметру `dateFrom` в запросе. Если часовой пояс не указан, то берется Московское время (UTC+3)
	LastChangeDate *string `json:"lastChangeDate,omitempty"`

	// NmId Артикул WB
	NmId *int `json:"nmId,omitempty"`

	// Quantity Количество, доступное для продажи (сколько можно добавить в корзину)
	Quantity *int `json:"quantity,omitempty"`

	// QuantityFull Полное (непроданное) количество, которое числится за складом (= `quantity` + в пути)
	QuantityFull *int `json:"quantityFull,omitempty"`

	// Subject Предмет
	Subject *string `json:"subject,omitempty"`

	// SupplierArticle Артикул продавца
	SupplierArticle *string `json:"supplierArticle,omitempty"`

	// TechSize Размер
	TechSize *string `json:"techSize,omitempty"`

	// WarehouseName Название склада
	WarehouseName *string `json:"warehouseName,omitempty"`
}

// ResponseErrorStatistics defines model for responseErrorStatistics.
type ResponseErrorStatistics struct {
	Errors *[]string `json:"errors,omitempty"`
}

// Flag defines model for flag.
type Flag = int

// GetApiV1SupplierIncomesParams defines parameters for GetApiV1SupplierIncomes.
type GetApiV1SupplierIncomesParams struct {
	// DateFrom Дата и время последнего изменения по поставке. <br> Дата в формате RFC3339. Можно передать дату или дату со временем.  Время можно указывать с точностью до секунд или миллисекунд. <br> Время передаётся в часовом поясе Мск (UTC+3). <br>Примеры: <ul> <li> `2019-06-20` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul>
	DateFrom string `form:"dateFrom" json:"dateFrom"`
}

// GetApiV1SupplierOrdersParams defines parameters for GetApiV1SupplierOrders.
type GetApiV1SupplierOrdersParams struct {
	// DateFrom Дата и время последнего изменения по заказу. <br> Дата в формате RFC3339. Можно передать дату или дату со временем.  Время можно указывать с точностью до секунд или миллисекунд. <br> Время передаётся в часовом поясе Мск (UTC+3). <br>Примеры: <ul> <li> `2019-06-20` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul>
	DateFrom string `form:"dateFrom" json:"dateFrom"`

	// Flag Если параметр `flag=0` (или не указан в строке запроса), при вызове API возвращаются данные,  у которых значение поля `lastChangeDate` (дата время обновления информации в сервисе) больше или равно переданному  значению параметра `dateFrom`.  При этом количество возвращенных строк данных варьируется в интервале от 0 до примерно 100 000. <br> Если параметр `flag=1`, то будет выгружена информация обо всех заказах или продажах с датой,  равной переданному параметру `dateFrom` (в данном случае время в дате значения не имеет).  При этом количество возвращенных строк данных будет равно количеству всех заказов или продаж,  сделанных в указанную дату, переданную в параметре `dateFrom`.
	Flag *Flag `form:"flag,omitempty" json:"flag,omitempty"`
}

// GetApiV1SupplierSalesParams defines parameters for GetApiV1SupplierSales.
type GetApiV1SupplierSalesParams struct {
	// DateFrom Дата и время последнего изменения по продаже/возврату. <br> Дата в формате RFC3339. Можно передать дату или дату со временем.  Время можно указывать с точностью до секунд или миллисекунд. <br> Время передаётся в часовом поясе Мск (UTC+3). <br>Примеры: <ul> <li> `2019-06-20` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul>
	DateFrom string `form:"dateFrom" json:"dateFrom"`

	// Flag Если параметр `flag=0` (или не указан в строке запроса), при вызове API возвращаются данные,  у которых значение поля `lastChangeDate` (дата время обновления информации в сервисе) больше или равно переданному  значению параметра `dateFrom`.  При этом количество возвращенных строк данных варьируется в интервале от 0 до примерно 100 000. <br> Если параметр `flag=1`, то будет выгружена информация обо всех заказах или продажах с датой,  равной переданному параметру `dateFrom` (в данном случае время в дате значения не имеет).  При этом количество возвращенных строк данных будет равно количеству всех заказов или продаж,  сделанных в указанную дату, переданную в параметре `dateFrom`.
	Flag *Flag `form:"flag,omitempty" json:"flag,omitempty"`
}

// GetApiV1SupplierStocksParams defines parameters for GetApiV1SupplierStocks.
type GetApiV1SupplierStocksParams struct {
	// DateFrom Дата и время последнего изменения по товару. <br> Для получения полного остатка следует указывать максимально раннее значение. <br> Например, `2019-06-20` <br> Дата в формате RFC3339. Можно передать дату или дату со временем.  Время можно указывать с точностью до секунд или миллисекунд. <br> Время передаётся в часовом поясе Мск (UTC+3). <br>Примеры: <ul> <li> `2019-06-20` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul>
	DateFrom string `form:"dateFrom" json:"dateFrom"`
}

// GetApiV5SupplierReportDetailByPeriodParams defines parameters for GetApiV5SupplierReportDetailByPeriod.
type GetApiV5SupplierReportDetailByPeriodParams struct {
	// DateFrom Начальная дата отчета.<br> Дата в формате RFC3339. Можно передать дату или дату со временем.  Время можно указывать с точностью до секунд или миллисекунд. <br> Время передаётся в часовом поясе Мск (UTC+3). <br>Примеры: <ul> <li> `2019-06-20` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul>
	DateFrom string `form:"dateFrom" json:"dateFrom"`

	// Limit Максимальное количество строк отчета, возвращаемых методом. Не может быть более 100000.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// DateTo Конечная дата отчета
	DateTo openapi_types.Date `form:"dateTo" json:"dateTo"`

	// Rrdid Уникальный идентификатор строки отчета. Необходим для получения отчета частями.
	// <br>
	// Загрузку отчета нужно начинать с `rrdid = 0` и при последующих вызовах API передавать в запросе значение `rrd_id` из последней строки, полученной в результате предыдущего вызова.
	// <br>
	// Таким образом для загрузки одного отчета может понадобиться вызывать API до тех пор, пока количество возвращаемых строк не станет равным нулю.
	Rrdid *int `form:"rrdid,omitempty" json:"rrdid,omitempty"`
}
