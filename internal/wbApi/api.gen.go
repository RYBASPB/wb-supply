// Package wb_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package wbApi

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiV1SupplierIncomes request
	GetApiV1SupplierIncomes(ctx context.Context, params *GetApiV1SupplierIncomesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1SupplierOrders request
	GetApiV1SupplierOrders(ctx context.Context, params *GetApiV1SupplierOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1SupplierSales request
	GetApiV1SupplierSales(ctx context.Context, params *GetApiV1SupplierSalesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1SupplierStocks request
	GetApiV1SupplierStocks(ctx context.Context, params *GetApiV1SupplierStocksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV5SupplierReportDetailByPeriod request
	GetApiV5SupplierReportDetailByPeriod(ctx context.Context, params *GetApiV5SupplierReportDetailByPeriodParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiV1SupplierIncomes(ctx context.Context, params *GetApiV1SupplierIncomesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SupplierIncomesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1SupplierOrders(ctx context.Context, params *GetApiV1SupplierOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SupplierOrdersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1SupplierSales(ctx context.Context, params *GetApiV1SupplierSalesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SupplierSalesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1SupplierStocks(ctx context.Context, params *GetApiV1SupplierStocksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SupplierStocksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV5SupplierReportDetailByPeriod(ctx context.Context, params *GetApiV5SupplierReportDetailByPeriodParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV5SupplierReportDetailByPeriodRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiV1SupplierIncomesRequest generates requests for GetApiV1SupplierIncomes
func NewGetApiV1SupplierIncomesRequest(server string, params *GetApiV1SupplierIncomesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/supplier/incomes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateFrom", runtime.ParamLocationQuery, params.DateFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1SupplierOrdersRequest generates requests for GetApiV1SupplierOrders
func NewGetApiV1SupplierOrdersRequest(server string, params *GetApiV1SupplierOrdersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/supplier/orders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateFrom", runtime.ParamLocationQuery, params.DateFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Flag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "flag", runtime.ParamLocationQuery, *params.Flag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1SupplierSalesRequest generates requests for GetApiV1SupplierSales
func NewGetApiV1SupplierSalesRequest(server string, params *GetApiV1SupplierSalesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/supplier/sales")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateFrom", runtime.ParamLocationQuery, params.DateFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Flag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "flag", runtime.ParamLocationQuery, *params.Flag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1SupplierStocksRequest generates requests for GetApiV1SupplierStocks
func NewGetApiV1SupplierStocksRequest(server string, params *GetApiV1SupplierStocksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/supplier/stocks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateFrom", runtime.ParamLocationQuery, params.DateFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV5SupplierReportDetailByPeriodRequest generates requests for GetApiV5SupplierReportDetailByPeriod
func NewGetApiV5SupplierReportDetailByPeriodRequest(server string, params *GetApiV5SupplierReportDetailByPeriodParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v5/supplier/reportDetailByPeriod")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateFrom", runtime.ParamLocationQuery, params.DateFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateTo", runtime.ParamLocationQuery, params.DateTo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Rrdid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rrdid", runtime.ParamLocationQuery, *params.Rrdid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiV1SupplierIncomesWithResponse request
	GetApiV1SupplierIncomesWithResponse(ctx context.Context, params *GetApiV1SupplierIncomesParams, reqEditors ...RequestEditorFn) (*GetApiV1SupplierIncomesResponse, error)

	// GetApiV1SupplierOrdersWithResponse request
	GetApiV1SupplierOrdersWithResponse(ctx context.Context, params *GetApiV1SupplierOrdersParams, reqEditors ...RequestEditorFn) (*GetApiV1SupplierOrdersResponse, error)

	// GetApiV1SupplierSalesWithResponse request
	GetApiV1SupplierSalesWithResponse(ctx context.Context, params *GetApiV1SupplierSalesParams, reqEditors ...RequestEditorFn) (*GetApiV1SupplierSalesResponse, error)

	// GetApiV1SupplierStocksWithResponse request
	GetApiV1SupplierStocksWithResponse(ctx context.Context, params *GetApiV1SupplierStocksParams, reqEditors ...RequestEditorFn) (*GetApiV1SupplierStocksResponse, error)

	// GetApiV5SupplierReportDetailByPeriodWithResponse request
	GetApiV5SupplierReportDetailByPeriodWithResponse(ctx context.Context, params *GetApiV5SupplierReportDetailByPeriodParams, reqEditors ...RequestEditorFn) (*GetApiV5SupplierReportDetailByPeriodResponse, error)
}

type GetApiV1SupplierIncomesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IncomesItem
	JSON401      *struct {
		// Code Внутренний код ошибки
		Code *string `json:"code,omitempty"`

		// Detail Детали ошибки
		Detail *string `json:"detail,omitempty"`

		// Origin ID внутреннего сервиса WB
		Origin *string `json:"origin,omitempty"`

		// RequestId Уникальный ID запроса
		RequestId *string `json:"requestId,omitempty"`

		// Status HTTP статус-код
		Status *float32 `json:"status,omitempty"`

		// StatusText Расшифровка HTTP статус-кода
		StatusText *string `json:"statusText,omitempty"`

		// Title Заголовок ошибки
		Title *string `json:"title,omitempty"`
	}
	JSON429 *struct {
		// Code Внутренний код ошибки
		Code *string `json:"code,omitempty"`

		// Detail Детали ошибки
		Detail *string `json:"detail,omitempty"`

		// Origin ID внутреннего сервиса WB
		Origin *string `json:"origin,omitempty"`

		// RequestId Уникальный ID запроса
		RequestId *string `json:"requestId,omitempty"`

		// Status HTTP статус-код
		Status *float32 `json:"status,omitempty"`

		// StatusText Расшифровка HTTP статус-кода
		StatusText *string `json:"statusText,omitempty"`

		// Title Заголовок ошибки
		Title *string `json:"title,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1SupplierIncomesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SupplierIncomesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SupplierOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OrdersItem
	JSON400      *ResponseErrorStatistics
	JSON401      *struct {
		// Code Внутренний код ошибки
		Code *string `json:"code,omitempty"`

		// Detail Детали ошибки
		Detail *string `json:"detail,omitempty"`

		// Origin ID внутреннего сервиса WB
		Origin *string `json:"origin,omitempty"`

		// RequestId Уникальный ID запроса
		RequestId *string `json:"requestId,omitempty"`

		// Status HTTP статус-код
		Status *float32 `json:"status,omitempty"`

		// StatusText Расшифровка HTTP статус-кода
		StatusText *string `json:"statusText,omitempty"`

		// Title Заголовок ошибки
		Title *string `json:"title,omitempty"`
	}
	JSON429 *struct {
		// Code Внутренний код ошибки
		Code *string `json:"code,omitempty"`

		// Detail Детали ошибки
		Detail *string `json:"detail,omitempty"`

		// Origin ID внутреннего сервиса WB
		Origin *string `json:"origin,omitempty"`

		// RequestId Уникальный ID запроса
		RequestId *string `json:"requestId,omitempty"`

		// Status HTTP статус-код
		Status *float32 `json:"status,omitempty"`

		// StatusText Расшифровка HTTP статус-кода
		StatusText *string `json:"statusText,omitempty"`

		// Title Заголовок ошибки
		Title *string `json:"title,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1SupplierOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SupplierOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SupplierSalesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SalesItem
	JSON400      *ResponseErrorStatistics
	JSON401      *struct {
		// Code Внутренний код ошибки
		Code *string `json:"code,omitempty"`

		// Detail Детали ошибки
		Detail *string `json:"detail,omitempty"`

		// Origin ID внутреннего сервиса WB
		Origin *string `json:"origin,omitempty"`

		// RequestId Уникальный ID запроса
		RequestId *string `json:"requestId,omitempty"`

		// Status HTTP статус-код
		Status *float32 `json:"status,omitempty"`

		// StatusText Расшифровка HTTP статус-кода
		StatusText *string `json:"statusText,omitempty"`

		// Title Заголовок ошибки
		Title *string `json:"title,omitempty"`
	}
	JSON429 *struct {
		// Code Внутренний код ошибки
		Code *string `json:"code,omitempty"`

		// Detail Детали ошибки
		Detail *string `json:"detail,omitempty"`

		// Origin ID внутреннего сервиса WB
		Origin *string `json:"origin,omitempty"`

		// RequestId Уникальный ID запроса
		RequestId *string `json:"requestId,omitempty"`

		// Status HTTP статус-код
		Status *float32 `json:"status,omitempty"`

		// StatusText Расшифровка HTTP статус-кода
		StatusText *string `json:"statusText,omitempty"`

		// Title Заголовок ошибки
		Title *string `json:"title,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1SupplierSalesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SupplierSalesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SupplierStocksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]StocksItem
	JSON401      *struct {
		// Code Внутренний код ошибки
		Code *string `json:"code,omitempty"`

		// Detail Детали ошибки
		Detail *string `json:"detail,omitempty"`

		// Origin ID внутреннего сервиса WB
		Origin *string `json:"origin,omitempty"`

		// RequestId Уникальный ID запроса
		RequestId *string `json:"requestId,omitempty"`

		// Status HTTP статус-код
		Status *float32 `json:"status,omitempty"`

		// StatusText Расшифровка HTTP статус-кода
		StatusText *string `json:"statusText,omitempty"`

		// Title Заголовок ошибки
		Title *string `json:"title,omitempty"`
	}
	JSON429 *struct {
		// Code Внутренний код ошибки
		Code *string `json:"code,omitempty"`

		// Detail Детали ошибки
		Detail *string `json:"detail,omitempty"`

		// Origin ID внутреннего сервиса WB
		Origin *string `json:"origin,omitempty"`

		// RequestId Уникальный ID запроса
		RequestId *string `json:"requestId,omitempty"`

		// Status HTTP статус-код
		Status *float32 `json:"status,omitempty"`

		// StatusText Расшифровка HTTP статус-кода
		StatusText *string `json:"statusText,omitempty"`

		// Title Заголовок ошибки
		Title *string `json:"title,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1SupplierStocksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SupplierStocksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV5SupplierReportDetailByPeriodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DetailReportItem
	JSON401      *struct {
		// Code Внутренний код ошибки
		Code *string `json:"code,omitempty"`

		// Detail Детали ошибки
		Detail *string `json:"detail,omitempty"`

		// Origin ID внутреннего сервиса WB
		Origin *string `json:"origin,omitempty"`

		// RequestId Уникальный ID запроса
		RequestId *string `json:"requestId,omitempty"`

		// Status HTTP статус-код
		Status *float32 `json:"status,omitempty"`

		// StatusText Расшифровка HTTP статус-кода
		StatusText *string `json:"statusText,omitempty"`

		// Title Заголовок ошибки
		Title *string `json:"title,omitempty"`
	}
	JSON429 *struct {
		// Code Внутренний код ошибки
		Code *string `json:"code,omitempty"`

		// Detail Детали ошибки
		Detail *string `json:"detail,omitempty"`

		// Origin ID внутреннего сервиса WB
		Origin *string `json:"origin,omitempty"`

		// RequestId Уникальный ID запроса
		RequestId *string `json:"requestId,omitempty"`

		// Status HTTP статус-код
		Status *float32 `json:"status,omitempty"`

		// StatusText Расшифровка HTTP статус-кода
		StatusText *string `json:"statusText,omitempty"`

		// Title Заголовок ошибки
		Title *string `json:"title,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV5SupplierReportDetailByPeriodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV5SupplierReportDetailByPeriodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiV1SupplierIncomesWithResponse request returning *GetApiV1SupplierIncomesResponse
func (c *ClientWithResponses) GetApiV1SupplierIncomesWithResponse(ctx context.Context, params *GetApiV1SupplierIncomesParams, reqEditors ...RequestEditorFn) (*GetApiV1SupplierIncomesResponse, error) {
	rsp, err := c.GetApiV1SupplierIncomes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SupplierIncomesResponse(rsp)
}

// GetApiV1SupplierOrdersWithResponse request returning *GetApiV1SupplierOrdersResponse
func (c *ClientWithResponses) GetApiV1SupplierOrdersWithResponse(ctx context.Context, params *GetApiV1SupplierOrdersParams, reqEditors ...RequestEditorFn) (*GetApiV1SupplierOrdersResponse, error) {
	rsp, err := c.GetApiV1SupplierOrders(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SupplierOrdersResponse(rsp)
}

// GetApiV1SupplierSalesWithResponse request returning *GetApiV1SupplierSalesResponse
func (c *ClientWithResponses) GetApiV1SupplierSalesWithResponse(ctx context.Context, params *GetApiV1SupplierSalesParams, reqEditors ...RequestEditorFn) (*GetApiV1SupplierSalesResponse, error) {
	rsp, err := c.GetApiV1SupplierSales(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SupplierSalesResponse(rsp)
}

// GetApiV1SupplierStocksWithResponse request returning *GetApiV1SupplierStocksResponse
func (c *ClientWithResponses) GetApiV1SupplierStocksWithResponse(ctx context.Context, params *GetApiV1SupplierStocksParams, reqEditors ...RequestEditorFn) (*GetApiV1SupplierStocksResponse, error) {
	rsp, err := c.GetApiV1SupplierStocks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SupplierStocksResponse(rsp)
}

// GetApiV5SupplierReportDetailByPeriodWithResponse request returning *GetApiV5SupplierReportDetailByPeriodResponse
func (c *ClientWithResponses) GetApiV5SupplierReportDetailByPeriodWithResponse(ctx context.Context, params *GetApiV5SupplierReportDetailByPeriodParams, reqEditors ...RequestEditorFn) (*GetApiV5SupplierReportDetailByPeriodResponse, error) {
	rsp, err := c.GetApiV5SupplierReportDetailByPeriod(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV5SupplierReportDetailByPeriodResponse(rsp)
}

// ParseGetApiV1SupplierIncomesResponse parses an HTTP response from a GetApiV1SupplierIncomesWithResponse call
func ParseGetApiV1SupplierIncomesResponse(rsp *http.Response) (*GetApiV1SupplierIncomesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SupplierIncomesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IncomesItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Code Внутренний код ошибки
			Code *string `json:"code,omitempty"`

			// Detail Детали ошибки
			Detail *string `json:"detail,omitempty"`

			// Origin ID внутреннего сервиса WB
			Origin *string `json:"origin,omitempty"`

			// RequestId Уникальный ID запроса
			RequestId *string `json:"requestId,omitempty"`

			// Status HTTP статус-код
			Status *float32 `json:"status,omitempty"`

			// StatusText Расшифровка HTTP статус-кода
			StatusText *string `json:"statusText,omitempty"`

			// Title Заголовок ошибки
			Title *string `json:"title,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			// Code Внутренний код ошибки
			Code *string `json:"code,omitempty"`

			// Detail Детали ошибки
			Detail *string `json:"detail,omitempty"`

			// Origin ID внутреннего сервиса WB
			Origin *string `json:"origin,omitempty"`

			// RequestId Уникальный ID запроса
			RequestId *string `json:"requestId,omitempty"`

			// Status HTTP статус-код
			Status *float32 `json:"status,omitempty"`

			// StatusText Расшифровка HTTP статус-кода
			StatusText *string `json:"statusText,omitempty"`

			// Title Заголовок ошибки
			Title *string `json:"title,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetApiV1SupplierOrdersResponse parses an HTTP response from a GetApiV1SupplierOrdersWithResponse call
func ParseGetApiV1SupplierOrdersResponse(rsp *http.Response) (*GetApiV1SupplierOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SupplierOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OrdersItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseErrorStatistics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Code Внутренний код ошибки
			Code *string `json:"code,omitempty"`

			// Detail Детали ошибки
			Detail *string `json:"detail,omitempty"`

			// Origin ID внутреннего сервиса WB
			Origin *string `json:"origin,omitempty"`

			// RequestId Уникальный ID запроса
			RequestId *string `json:"requestId,omitempty"`

			// Status HTTP статус-код
			Status *float32 `json:"status,omitempty"`

			// StatusText Расшифровка HTTP статус-кода
			StatusText *string `json:"statusText,omitempty"`

			// Title Заголовок ошибки
			Title *string `json:"title,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			// Code Внутренний код ошибки
			Code *string `json:"code,omitempty"`

			// Detail Детали ошибки
			Detail *string `json:"detail,omitempty"`

			// Origin ID внутреннего сервиса WB
			Origin *string `json:"origin,omitempty"`

			// RequestId Уникальный ID запроса
			RequestId *string `json:"requestId,omitempty"`

			// Status HTTP статус-код
			Status *float32 `json:"status,omitempty"`

			// StatusText Расшифровка HTTP статус-кода
			StatusText *string `json:"statusText,omitempty"`

			// Title Заголовок ошибки
			Title *string `json:"title,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetApiV1SupplierSalesResponse parses an HTTP response from a GetApiV1SupplierSalesWithResponse call
func ParseGetApiV1SupplierSalesResponse(rsp *http.Response) (*GetApiV1SupplierSalesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SupplierSalesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SalesItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResponseErrorStatistics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Code Внутренний код ошибки
			Code *string `json:"code,omitempty"`

			// Detail Детали ошибки
			Detail *string `json:"detail,omitempty"`

			// Origin ID внутреннего сервиса WB
			Origin *string `json:"origin,omitempty"`

			// RequestId Уникальный ID запроса
			RequestId *string `json:"requestId,omitempty"`

			// Status HTTP статус-код
			Status *float32 `json:"status,omitempty"`

			// StatusText Расшифровка HTTP статус-кода
			StatusText *string `json:"statusText,omitempty"`

			// Title Заголовок ошибки
			Title *string `json:"title,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			// Code Внутренний код ошибки
			Code *string `json:"code,omitempty"`

			// Detail Детали ошибки
			Detail *string `json:"detail,omitempty"`

			// Origin ID внутреннего сервиса WB
			Origin *string `json:"origin,omitempty"`

			// RequestId Уникальный ID запроса
			RequestId *string `json:"requestId,omitempty"`

			// Status HTTP статус-код
			Status *float32 `json:"status,omitempty"`

			// StatusText Расшифровка HTTP статус-кода
			StatusText *string `json:"statusText,omitempty"`

			// Title Заголовок ошибки
			Title *string `json:"title,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetApiV1SupplierStocksResponse parses an HTTP response from a GetApiV1SupplierStocksWithResponse call
func ParseGetApiV1SupplierStocksResponse(rsp *http.Response) (*GetApiV1SupplierStocksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SupplierStocksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []StocksItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Code Внутренний код ошибки
			Code *string `json:"code,omitempty"`

			// Detail Детали ошибки
			Detail *string `json:"detail,omitempty"`

			// Origin ID внутреннего сервиса WB
			Origin *string `json:"origin,omitempty"`

			// RequestId Уникальный ID запроса
			RequestId *string `json:"requestId,omitempty"`

			// Status HTTP статус-код
			Status *float32 `json:"status,omitempty"`

			// StatusText Расшифровка HTTP статус-кода
			StatusText *string `json:"statusText,omitempty"`

			// Title Заголовок ошибки
			Title *string `json:"title,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			// Code Внутренний код ошибки
			Code *string `json:"code,omitempty"`

			// Detail Детали ошибки
			Detail *string `json:"detail,omitempty"`

			// Origin ID внутреннего сервиса WB
			Origin *string `json:"origin,omitempty"`

			// RequestId Уникальный ID запроса
			RequestId *string `json:"requestId,omitempty"`

			// Status HTTP статус-код
			Status *float32 `json:"status,omitempty"`

			// StatusText Расшифровка HTTP статус-кода
			StatusText *string `json:"statusText,omitempty"`

			// Title Заголовок ошибки
			Title *string `json:"title,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetApiV5SupplierReportDetailByPeriodResponse parses an HTTP response from a GetApiV5SupplierReportDetailByPeriodWithResponse call
func ParseGetApiV5SupplierReportDetailByPeriodResponse(rsp *http.Response) (*GetApiV5SupplierReportDetailByPeriodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV5SupplierReportDetailByPeriodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DetailReportItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Code Внутренний код ошибки
			Code *string `json:"code,omitempty"`

			// Detail Детали ошибки
			Detail *string `json:"detail,omitempty"`

			// Origin ID внутреннего сервиса WB
			Origin *string `json:"origin,omitempty"`

			// RequestId Уникальный ID запроса
			RequestId *string `json:"requestId,omitempty"`

			// Status HTTP статус-код
			Status *float32 `json:"status,omitempty"`

			// StatusText Расшифровка HTTP статус-кода
			StatusText *string `json:"statusText,omitempty"`

			// Title Заголовок ошибки
			Title *string `json:"title,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest struct {
			// Code Внутренний код ошибки
			Code *string `json:"code,omitempty"`

			// Detail Детали ошибки
			Detail *string `json:"detail,omitempty"`

			// Origin ID внутреннего сервиса WB
			Origin *string `json:"origin,omitempty"`

			// RequestId Уникальный ID запроса
			RequestId *string `json:"requestId,omitempty"`

			// Status HTTP статус-код
			Status *float32 `json:"status,omitempty"`

			// StatusText Расшифровка HTTP статус-кода
			StatusText *string `json:"statusText,omitempty"`

			// Title Заголовок ошибки
			Title *string `json:"title,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}
